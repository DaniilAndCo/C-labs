        -:    0:Source:GoodsList.c
        -:    0:Graph:GoodsList.gcno
        -:    0:Data:GoodsList.gcda
        -:    0:Runs:1
        -:    1:#include "GoodsList.h"
        -:    2:
        -:    3:#define NULL (void*)0
function NewGood called 3 returned 100% blocks executed 100%
        3:    4:struct Node_Good* NewGood(){
        3:    5:    struct Node_Good* newGood = (struct Node_Good*) malloc(sizeof(struct Node_Good));
        3:    6:    newGood->next = NULL;
        3:    7:    newGood->prev = NULL;
        3:    8:    newGood->data = NULL;
        3:    9:    return newGood;
        3:    9-block  0
unconditional  0 taken 3
        -:   10:}
        -:   11:
function AddGood called 2 returned 100% blocks executed 100%
        2:   12:bool AddGood(struct GoodsList* list, struct Good* good){
        -:   13:
        2:   14:    struct Node_Good* newGood = NewGood();
        2:   14-block  0
call    0 returned 2
        2:   15:    newGood->data = (struct Good*) malloc(sizeof(struct Good));
        2:   16:    newGood->data = good;
        -:   17:
        2:   18:    if(list->head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   19:        list->head = newGood;
        1:   20:        list->tail = list->head;
        1:   21:        return false;
        1:   21-block  0
unconditional  0 taken 1
        -:   22:    }
        -:   23:
        1:   24:    list->head->prev = newGood;
        1:   25:    newGood->next = list->head;
        1:   26:    list->head = newGood;
        1:   27:    return true;
        1:   27-block  0
unconditional  0 taken 1
        -:   28:}
        -:   29:
function PrintGoods called 2 returned 100% blocks executed 100%
        2:   30:bool PrintGoods(struct GoodsList list){
        -:   31:
        2:   32:    printf("\n____Printing Goods____\n");
        2:   32-block  0
call    0 returned 2
        2:   33:    if(list.head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   34:        printf("Goods List is empty!\n");
        1:   34-block  0
call    0 returned 1
        1:   35:        return false;
unconditional  0 taken 1
        -:   36:    }
        -:   37:
        1:   38:    struct Node_Good* temp = list.head;
        3:   39:    while(temp != NULL){
        1:   39-block  0
unconditional  0 taken 1
        3:   39-block  1
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   40:        PrintInfoGoods(*temp->data);
        2:   40-block  0
call    0 returned 2
        2:   41:        temp = temp->next;
unconditional  0 taken 2
        -:   42:    }
        1:   43:    printf("________________________\n");
        1:   43-block  0
call    0 returned 1
        1:   44:    return true;
unconditional  0 taken 1
        -:   45:}
        -:   46:
function SearchGood called 2 returned 100% blocks executed 80%
        2:   47:struct Node_Good* SearchGood(struct GoodsList* list, struct Good* man){
        2:   48:    struct Node_Good *temp = list->head;
        -:   49:
        4:   50:    while(temp->data != NULL && temp != NULL && temp->data != man){
        2:   50-block  0
unconditional  0 taken 2
        4:   50-block  1
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:   50-block  2
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4:   50-block  3
branch  5 taken 2
branch  6 taken 2 (fallthrough)
        2:   51:        temp = temp->next;
        2:   51-block  0
unconditional  0 taken 2
        -:   52:    }
        -:   53:
        2:   54:    if(temp->data == NULL){
        2:   54-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   55:        printf("No such Good found\n");
    %%%%%:   55-block  0
call    0 never executed
    #####:   56:        return NULL;
unconditional  0 never executed
        -:   57:    }
        -:   58:
        2:   59:    return temp;
        2:   59-block  0
unconditional  0 taken 2
        -:   60:}
        -:   61:
function DeleteGood called 1 returned 100% blocks executed 64%
        1:   62:bool DeleteGood(struct GoodsList* list, struct Good* good){
        1:   63:    struct Node_Good* rmGood = SearchGood(list, good);
        1:   63-block  0
call    0 returned 1
        -:   64:
        1:   65:    if(rmGood == NULL){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   66:        return false;
    %%%%%:   66-block  0
unconditional  0 never executed
        -:   67:    }
        -:   68:
        1:   69:    if(rmGood == list->tail){
        1:   69-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   70:        list->tail->prev->next = NULL;
        1:   71:        list->tail = rmGood->prev;
        1:   71-block  0
unconditional  0 taken 1
        -:   72:    }
    #####:   73:    else if(rmGood == list->head){
    %%%%%:   73-block  0
branch  0 never executed
branch  1 never executed
    #####:   74:        list->head->next->prev = NULL;
    #####:   75:        list->head = rmGood->next;
    %%%%%:   75-block  0
unconditional  0 never executed
        -:   76:    }
        -:   77:    else {
    #####:   78:        rmGood->next->prev = rmGood->prev;
    #####:   79:        rmGood->prev->next = rmGood->next;
    %%%%%:   79-block  0
unconditional  0 never executed
        -:   80:    }
        -:   81:
        1:   82:    printf("Good: <%s> is deleted\n\n", rmGood->data->name);
        1:   82-block  0
call    0 returned 1
        1:   83:    free(rmGood);
        1:   84:    return true;
unconditional  0 taken 1
        -:   85:}
        -:   86:
function PrintInfoGoods called 3 returned 100% blocks executed 100%
        3:   87:bool PrintInfoGoods(struct Good good){
        3:   88:    printf("\tGood: %s\nClient taken ID: %s\nValue: %i$\nMoney for it: %i$\nDate taken: %s\nTaken for time: %s\n\n",
        3:   88-block  0
call    0 returned 3
        -:   89:            good.name, good.clientID, good.value, good.money, good.date, good.timeKeeping);
        3:   90:            return true;
unconditional  0 taken 3
        -:   91:}
