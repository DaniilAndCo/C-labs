        -:    0:Source:ClintList.c
        -:    1:#include "ClintList.h"
        -:    2:
function NewClient called 3 returned 100% blocks executed 100%
        3:    3:struct Node_Client* NewClient(){
        3:    4:    struct Node_Client* newClient = (struct Node_Client*) malloc(sizeof(struct Node_Client));
        3:    5:    newClient->next = NULL;
        3:    6:    newClient->prev = NULL;
        3:    7:    newClient->data = NULL;
        3:    8:    return newClient;
        3:    8-block  0
unconditional  0 taken 3
        -:    9:}
        -:   10:
function AddClient called 2 returned 100% blocks executed 100%
        2:   11:bool AddClient(struct ClientList* list, struct Client* client){
        -:   12:
        2:   13:    struct Node_Client* newClient = NewClient();
        2:   13-block  0
call    0 returned 2
        2:   14:    newClient->data = (struct Client*) malloc(sizeof(struct Client));
        2:   15:    newClient->data = client;
        -:   16:
        2:   17:    if(list->head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   18:        list->head = newClient;
        1:   19:        list->tail = list->head;
        1:   20:        return false;
        1:   20-block  0
unconditional  0 taken 1
        -:   21:    }
        -:   22:
        1:   23:    list->head->prev = newClient;
        1:   24:    newClient->next = list->head;
        1:   25:    list->head = newClient;
        1:   26:    return true;
        1:   26-block  0
unconditional  0 taken 1
        -:   27:}
        -:   28:
function PrintClients called 2 returned 100% blocks executed 100%
        2:   29:bool PrintClients(struct ClientList list){
        -:   30:
        2:   31:    printf("\n____Printing Clients____\n\n");
        2:   31-block  0
call    0 returned 2
        2:   32:    if(list.head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   33:        printf("Client List is empty!\n");
        1:   33-block  0
call    0 returned 1
        1:   34:        return false;
unconditional  0 taken 1
        -:   35:    }
        -:   36:
        1:   37:    struct Node_Client* temp = list.head;
        3:   38:    while(temp != NULL){
        1:   38-block  0
unconditional  0 taken 1
        3:   38-block  1
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   39:        PrintInfo(*temp->data);
        2:   39-block  0
call    0 returned 2
        2:   40:        temp = temp->next;
unconditional  0 taken 2
        -:   41:    }
        1:   42:    printf("________________________\n");
        1:   42-block  0
call    0 returned 1
        1:   43:    return true;
unconditional  0 taken 1
        -:   44:}
        -:   45:
function PrintAllNames called 2 returned 100% blocks executed 100%
        2:   46:int PrintAllNames(struct ClientList list){
        -:   47:
        2:   48:    printf("\n____Printing Clients By Name____\n");
        2:   48-block  0
call    0 returned 2
        2:   49:    if(list.head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   50:        printf("Client List is empty!\n");
        1:   50-block  0
call    0 returned 1
        1:   51:        return 0;
unconditional  0 taken 1
        -:   52:    }
        -:   53:
        1:   54:    struct Node_Client* temp = list.head;
        1:   55:    int num = 1;
        3:   56:    while(temp != NULL){
        1:   56-block  0
unconditional  0 taken 1
        3:   56-block  1
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   57:        printf("%i. %s\n", num, temp->data->name);
        2:   57-block  0
call    0 returned 2
        2:   58:        num ++;
        2:   59:        temp = temp->next;
unconditional  0 taken 2
        -:   60:    }
        1:   61:    printf("_____________________________\n");
        1:   61-block  0
call    0 returned 1
        -:   62:
        1:   63:    return num;
unconditional  0 taken 1
        -:   64:
        -:   65:}
        -:   66:
function SearchClient called 2 returned 100% blocks executed 73%
        2:   67:struct Node_Client* SearchClient(struct ClientList* list, struct Client* man){
        2:   68:    struct Node_Client *temp = list->head;
        -:   69:
        4:   70:    while(temp->data != NULL && temp != NULL && temp->data != man){
        2:   70-block  0
unconditional  0 taken 2
        4:   70-block  1
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:   70-block  2
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4:   70-block  3
branch  5 taken 2
branch  6 taken 2 (fallthrough)
        2:   71:        temp = temp->next;
        2:   72:        printf("%s\n", temp->data->name);
        2:   72-block  0
call    0 returned 2
unconditional  1 taken 2
        -:   73:    }
        -:   74:
       2*:   75:    if(temp == NULL && temp->data == NULL){
        2:   75-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:   75-block  1
branch  2 never executed
branch  3 never executed
    #####:   76:        printf("No Client found\n");
    %%%%%:   76-block  0
call    0 never executed
    #####:   77:        return NULL;
unconditional  0 never executed
        -:   78:    }
        -:   79:
        2:   80:    return temp;
        2:   80-block  0
unconditional  0 taken 2
        -:   81:}
        -:   82:
        -:   83:
function DeleteClient called 1 returned 100% blocks executed 64%
        1:   84:bool DeleteClient(struct ClientList* list, struct Client* man){
        1:   85:    struct Node_Client* rmClient = SearchClient(list, man);
        1:   85-block  0
call    0 returned 1
        -:   86:
        1:   87:    if(rmClient == NULL){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   88:        return false;
    %%%%%:   88-block  0
unconditional  0 never executed
        -:   89:    }
        -:   90:
        1:   91:    if(rmClient == list->tail){
        1:   91-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   92:        list->tail->prev->next = NULL;
        1:   93:        list->tail = rmClient->prev;
        1:   93-block  0
unconditional  0 taken 1
        -:   94:    }
    #####:   95:    else if(rmClient == list->head){
    %%%%%:   95-block  0
branch  0 never executed
branch  1 never executed
    #####:   96:        list->head->next->prev = NULL;
    #####:   97:        list->head = rmClient->next;
    %%%%%:   97-block  0
unconditional  0 never executed
        -:   98:    }
        -:   99:    else {
    #####:  100:        rmClient->next->prev = rmClient->prev;
    #####:  101:        rmClient->prev->next = rmClient->next;
    %%%%%:  101-block  0
unconditional  0 never executed
        -:  102:    }
        -:  103:
        1:  104:    printf("Client: <%s> is deleted\n\n", rmClient->data->name);
        1:  104-block  0
call    0 returned 1
        1:  105:    free(rmClient);
        1:  106:    return true;
unconditional  0 taken 1
        -:  107:}
        -:  108:
function PrintInfo called 3 returned 100% blocks executed 100%
        3:  109:bool PrintInfo(struct Client client){
        3:  110:    printf("\tClient: %s\nPassport: %s\n", client.name, client.Passport);
        3:  110-block  0
call    0 returned 3
        3:  111:    return true;
unconditional  0 taken 3
        -:  112:}
