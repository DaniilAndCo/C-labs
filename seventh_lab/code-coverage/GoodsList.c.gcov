        -:    0:Source:GoodsList.c
        -:    1:#include "GoodsList.h"
        -:    2:
function NewGood called 3 returned 100% blocks executed 100%
        3:    3:struct Node_Good* NewGood(){
        3:    4:    struct Node_Good* newGood = (struct Node_Good*) malloc(sizeof(struct Node_Good));
        3:    5:    newGood->next = NULL;
        3:    6:    newGood->prev = NULL;
        3:    7:    newGood->data = NULL;
        3:    8:    return newGood;
        3:    8-block  0
unconditional  0 taken 3
        -:    9:}
        -:   10:
function AddGood called 2 returned 100% blocks executed 100%
        2:   11:bool AddGood(struct GoodsList* list, struct Good* good){
        -:   12:
        2:   13:    struct Node_Good* newGood = NewGood();
        2:   13-block  0
call    0 returned 2
        2:   14:    newGood->data = (struct Good*) malloc(sizeof(struct Good));
        2:   15:    newGood->data = good;
        -:   16:
        2:   17:    if(list->head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   18:        list->head = newGood;
        1:   19:        list->tail = list->head;
        1:   20:        return false;
        1:   20-block  0
unconditional  0 taken 1
        -:   21:    }
        -:   22:
        1:   23:    list->head->prev = newGood;
        1:   24:    newGood->next = list->head;
        1:   25:    list->head = newGood;
        1:   26:    return true;
        1:   26-block  0
unconditional  0 taken 1
        -:   27:}
        -:   28:
function PrintGoods called 2 returned 100% blocks executed 100%
        2:   29:bool PrintGoods(struct GoodsList list){
        -:   30:
        2:   31:    printf("\n____Printing Goods____\n");
        2:   31-block  0
call    0 returned 2
        2:   32:    if(list.head == NULL){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   33:        printf("Goods List is empty!\n");
        1:   33-block  0
call    0 returned 1
        1:   34:        return false;
unconditional  0 taken 1
        -:   35:    }
        -:   36:
        1:   37:    struct Node_Good* temp = list.head;
        3:   38:    while(temp != NULL){
        1:   38-block  0
unconditional  0 taken 1
        3:   38-block  1
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   39:        PrintInfoGoods(*temp->data);
        2:   39-block  0
call    0 returned 2
        2:   40:        temp = temp->next;
unconditional  0 taken 2
        -:   41:    }
        1:   42:    printf("________________________\n");
        1:   42-block  0
call    0 returned 1
        1:   43:    return true;
unconditional  0 taken 1
        -:   44:}
        -:   45:
function SearchGood called 2 returned 100% blocks executed 89%
        2:   46:struct Node_Good* SearchGood(struct GoodsList* list, struct Good* man){
        2:   47:    struct Node_Good *temp = list->head;
        -:   48:
        4:   49:    while(temp->data != NULL && temp != NULL && temp->data != man){
        2:   49-block  0
unconditional  0 taken 2
        4:   49-block  1
branch  1 taken 4 (fallthrough)
branch  2 taken 0
        4:   49-block  2
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4:   49-block  3
branch  5 taken 2
branch  6 taken 2 (fallthrough)
        2:   50:        temp = temp->next;
        2:   50-block  0
unconditional  0 taken 2
        -:   51:    }
        -:   52:
        2:   53:    if(temp->data == NULL){
        2:   53-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   54:        return NULL;
    %%%%%:   54-block  0
unconditional  0 never executed
        -:   55:    }
        -:   56:
        2:   57:    return temp;
        2:   57-block  0
unconditional  0 taken 2
        -:   58:}
        -:   59:
function DeleteGood called 1 returned 100% blocks executed 64%
        1:   60:bool DeleteGood(struct GoodsList* list, struct Good* good){
        1:   61:    struct Node_Good* rmGood = SearchGood(list, good);
        1:   61-block  0
call    0 returned 1
        -:   62:
        1:   63:    if(rmGood == NULL){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   64:        return false;
    %%%%%:   64-block  0
unconditional  0 never executed
        -:   65:    }
        -:   66:
        1:   67:    if(rmGood == list->tail){
        1:   67-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   68:        list->tail->prev->next = NULL;
        1:   69:        list->tail = rmGood->prev;
        1:   69-block  0
unconditional  0 taken 1
        -:   70:    }
    #####:   71:    else if(rmGood == list->head){
    %%%%%:   71-block  0
branch  0 never executed
branch  1 never executed
    #####:   72:        list->head->next->prev = NULL;
    #####:   73:        list->head = rmGood->next;
    %%%%%:   73-block  0
unconditional  0 never executed
        -:   74:    }
        -:   75:    else {
    #####:   76:        rmGood->next->prev = rmGood->prev;
    #####:   77:        rmGood->prev->next = rmGood->next;
    %%%%%:   77-block  0
unconditional  0 never executed
        -:   78:    }
        -:   79:
        1:   80:    printf("Good: <%s> is deleted\n\n", rmGood->data->name);
        1:   80-block  0
call    0 returned 1
        1:   81:    free(rmGood);
        1:   82:    return true;
unconditional  0 taken 1
        -:   83:}
        -:   84:
function PrintInfoGoods called 3 returned 100% blocks executed 100%
        3:   85:bool PrintInfoGoods(struct Good good){
        3:   86:    printf("\tGood: %s\nClient taken ID: %s\nValue: %i$\nMoney for it: %i$\nDate taken: %s\nTaken for time: %s\n\n",
        3:   86-block  0
call    0 returned 3
        -:   87:            good.name, good.clientID, good.value, good.money, good.date, good.timeKeeping);
        3:   88:            return true;
unconditional  0 taken 3
        -:   89:}
